---

- name: Testing Alias stati
  hosts: localhost
  gather_facts: no
  module_defaults:
    ansibleguy.opnsense.alias:
      firewall: "{{ lookup('ansible.builtin.env', 'TEST_FIREWALL') }}"
      api_credential_file: "{{ lookup('ansible.builtin.env', 'TEST_API_KEY') }}"
      ssl_verify: false

  tasks:
    - name: Removing - does not exist
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1__1_1'
        state: 'absent'
      register: opn1
      failed_when: opn1.changed

    - name: Adding
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_1'
        content: '1.1.1.1'
      register: opn2
      failed_when: >
        not opn2.changed or
        opn2.failed

    - name: Nothing changed
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_1'
        content: '1.1.1.1'
      register: opn3
      failed_when: >
        opn3.changed or
        opn3.failed
      when: not ansible_check_mode

    - name: Changing
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_1'
        content: ['1.1.1.2', '1.1.1.3']
      register: opn4
      failed_when: >
        not opn4.changed or
        opn4.failed

    - name: Changing to other type - invalid
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_1'
        content: 'https://test.ansibleguy.net'
      register: opn9
      failed_when: not opn9.failed

    - name: Disabling
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_1'
        enabled: false
      register: opn5
      failed_when: >
        not opn5.changed or
        opn5.failed
      when: not ansible_check_mode  # will not work if does not exist

    - name: Disabling - nothing changed
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_1'
        enabled: false
      register: opn8
      failed_when: >
        opn8.changed or
        opn8.failed
      when: not ansible_check_mode

    - name: Enabling
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_1'
      register: opn6
      failed_when: >
        not opn6.changed or
        opn6.failed
      when: not ansible_check_mode  # will not work if does not exist

    - name: Enabling - nothing changed
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_1'
      register: opn7
      failed_when: >
        opn7.changed or
        opn7.failed
      when: not ansible_check_mode

    - name: Removing
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_1'
        state: 'absent'
      register: opn4
      failed_when: >
        not opn4.changed or
        opn4.failed
      when: not ansible_check_mode

- name: Testing Alias types
  hosts: localhost
  gather_facts: no
  module_defaults:
    ansibleguy.opnsense.alias:
      firewall: "{{ lookup('ansible.builtin.env', 'TEST_FIREWALL') }}"
      api_credential_file: "{{ lookup('ansible.builtin.env', 'TEST_API_KEY') }}"
      ssl_verify: false

  tasks:
    # hosts

    - name: Adding single host
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_HOST1'
        type: 'host'
        content: ['1.1.1.1']

    - name: Adding multiple hosts
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_HOST2'
        type: 'host'
        content: ['1.1.1.1', '1.1.1.2']

    - name: Adding invalid host
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_HOST3'
        type: 'host'
        content: "{{ item }}"
      register: opnhost1
      failed_when: not opnhost1.failed
      loop:
        - ['1.1.1.n']

    # networks

    - name: Adding network
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_NET1'
        type: 'network'
        content: ['192.168.0.0/24']

    - name: Adding multiple networks
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_NET2'
        type: 'network'
        content: ['192.168.0.0/24', '192.168.1.0/24']

    - name: Adding invalid network
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_NET3'
        type: 'network'
        content: "{{ item }}"
      register: opnnet1
      failed_when: not opnnet1.failed
      loop:
        - ['192.168.0.0/240']

    # ports

    - name: Adding port
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_PORT1'
        type: 'port'
        content: ['9000']

    - name: Adding multiple ports
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_PORT2'
        type: 'port'
        content: ['80', '443']

    - name: Adding invalid port
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_PORT3'
        type: 'port'
        content: "{{ item }}"
      register: opnport1
      failed_when: not opnport1.failed
      loop:
        - ['70000']

    # urls

    - name: Adding url
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_URL1'
        type: 'url'
        content: ['https://ansibleguy.net']

    - name: Adding multiple urls
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_URL2'
        type: 'url'
        content: ['https://template.ansibleguy.net', 'http://test.ansibleguy.net']

    - name: Adding invalid url
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_URL3'
        type: 'url'
        content: "{{ item }}"
      register: opnurl1
      failed_when: not opnurl1.failed
      loop:
        - ['httks://test.ansibleguy.net']
        - ['test.ansibleguy.net']

    # urltable

    - name: Adding urltable
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_URLTABLE1'
        type: 'urltable'
        content: ['https://www.spamhaus.org/drop/drop.txt']

    - name: Adding multiple urltables
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_URLTABLE2'
        type: 'urltable'
        content: ['https://www.spamhaus.org/drop/drop.txt', 'https://www.spamhaus.org/drop/edrop.txt']

    - name: Adding invalid urltable
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_URLTABLE3'
        type: 'urltable'
        content: "{{ item }}"
      register: opnurltable1
      failed_when: not opnurltable1.failed
      loop:
        - ['httks://test.ansibleguy.net']
        #        - ['https://ansibleguy.net']  # not an urltable

    # geoip

    - name: Adding geoip
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_GEOIP1'
        type: 'geoip'
        content: ['AT']

    - name: Adding multiple geoips
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_GEOIP2'
        type: 'geoip'
        content: ['AT', 'DE', 'CH']

    - name: Adding invalid geoip
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_1_2_GEOIP3'
        type: 'geoip'
        content: "{{ item }}"
      register: opngeoip1
      failed_when: not opngeoip1.failed
      when: not ansible_check_mode  # no client-side validation
      loop:
        - ['XXX']

    # cleanup

    - name: Cleanup
      ansibleguy.opnsense.alias:
        name: "{{ item }}"
        state: 'absent'
      register: opntypecleanup
      diff: false
      loop:
        - 'ANSIBLE_TEST_1_2_URLTABLE3'
        - 'ANSIBLE_TEST_1_2_URLTABLE2'
        - 'ANSIBLE_TEST_1_2_URLTABLE1'
        - 'ANSIBLE_TEST_1_2_URL1'
        - 'ANSIBLE_TEST_1_2_URL2'
        - 'ANSIBLE_TEST_1_2_URL3'
        - 'ANSIBLE_TEST_1_2_PORT1'
        - 'ANSIBLE_TEST_1_2_PORT2'
        - 'ANSIBLE_TEST_1_2_PORT3'
        - 'ANSIBLE_TEST_1_2_NET1'
        - 'ANSIBLE_TEST_1_2_NET2'
        - 'ANSIBLE_TEST_1_2_NET3'
        - 'ANSIBLE_TEST_1_2_HOST1'
        - 'ANSIBLE_TEST_1_2_HOST2'
        - 'ANSIBLE_TEST_1_2_HOST3'
        - 'ANSIBLE_TEST_1_2_GEOIP1'
        - 'ANSIBLE_TEST_1_2_GEOIP2'
        - 'ANSIBLE_TEST_1_2_GEOIP3'
