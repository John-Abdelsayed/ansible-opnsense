---

- name: Testing Multiple Rules
  hosts: localhost
  gather_facts: no
  module_defaults:
    ansibleguy.opnsense.multi_rule:
      firewall: "{{ lookup('ansible.builtin.env', 'TEST_FIREWALL') }}"
      api_credential_file: "{{ lookup('ansible.builtin.env', 'TEST_API_KEY') }}"
      ssl_verify: false
      match_fields: ['description']
      key_field: 'description'

    ansibleguy.opnsense.rule_list:
      firewall: "{{ lookup('ansible.builtin.env', 'TEST_FIREWALL') }}"
      api_credential_file: "{{ lookup('ansible.builtin.env', 'TEST_API_KEY') }}"
      ssl_verify: false

  tasks:
    - name: Removing - do not exist
      ansibleguy.opnsense.multi_rule:
        rules:
          ANSIBLE_TEST_2_1:
          ANSIBLE_TEST_2_2:
          ANSIBLE_TEST_2_3:
        state: 'absent'
      register: opn1
      failed_when: >
        opn1.failed or
        opn1.changed

    - name: Adding
      ansibleguy.opnsense.multi_rule:
        rules:
          ANSIBLE_TEST_2_1:
            source_net: '192.168.1.0/24'
            destination_invert: true
            destination_net: '10.0.0.0/8'
            action: 'block'
          ANSIBLE_TEST_2_2:
            source_net: '192.168.0.0/24'
            destination_net: '192.168.10.0/24'
            destination_port: 443
            protocol: 'TCP'
            interface: 'lan'
          ANSIBLE_TEST_2_3:
            source_invert: true
            source_net: 'bogons'
            action: 'block'
      register: opn2
      failed_when: >
        opn2.failed or
        not opn2.changed

    - name: Changing
      ansibleguy.opnsense.multi_rule:
        rules:
          ANSIBLE_TEST_2_1:
            source_net: '192.168.1.0/24'
            destination_invert: true
            destination_net: '10.1.0.0/8'
            action: 'block'
          ANSIBLE_TEST_2_2:
            source_net: '192.168.0.0/24'
            destination_net: '192.168.10.0/24'
            destination_port: 8080
            protocol: 'TCP'
            interface: ['lan']
          ANSIBLE_TEST_2_3:
            source_invert: true
            source_net: 'bogons'
            ip_protocol: 'inet6'
            action: 'block'
      when: not ansible_check_mode  # no use in check mode
      register: opn3
      failed_when: >
        opn3.failed or
        not opn3.changed

    - name: Fail on client-side validation
      ansibleguy.opnsense.multi_rule:
        rules:
          ANSIBLE_TEST_2_1:
          ANSIBLE_TEST_2_2:
            destination_port: 'XXX'
          ANSIBLE_TEST_2_3:
      register: opn6
      failed_when: not opn6.failed

    - name: Don't fail on client-side validation
      ansibleguy.opnsense.multi_rule:
        rules:
          ANSIBLE_TEST_2_1:
          ANSIBLE_TEST_2_2:
            destination_port: 'XXX'
          ANSIBLE_TEST_2_3:
        fail_verification: false
      register: opn7
      failed_when: opn7.failed
      when: ansible_check_mode  # else the server-side will reject it

    - name: Fail on server-side validation
      ansibleguy.opnsense.multi_rule:
        rules:
          ANSIBLE_TEST_2_1:
          ANSIBLE_TEST_2_2:
            destination_port: 'XXX'
          ANSIBLE_TEST_2_3:
        fail_verification: false
      when: not ansible_check_mode  # no use in check mode
      register: opn8
      failed_when: not opn8.failed

    - name: Listing rules
      ansibleguy.opnsense.rule_list:
      register: opn4
      failed_when: >
        'rules' not in opn4 or
        opn4.rules | length != 3
      when: not ansible_check_mode  # no use in check mode

    - name: Removing
      ansibleguy.opnsense.multi_rule:
        rules:
          ANSIBLE_TEST_2_1:
          ANSIBLE_TEST_2_2:
          ANSIBLE_TEST_2_3:
        state: 'absent'

    - name: Checking cleanup
      ansibleguy.opnsense.rule_list:
      register: opn5
      failed_when: >
        'rules' not in opn5 or
        opn5.rules | length != 0
      when: not ansible_check_mode  # no use in check mode
